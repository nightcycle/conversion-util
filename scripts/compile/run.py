import json
# lower snake case to pascal case
def lower_snake_to_pascal_case(name: str):
	return name.title().replace("_", "")

def camel_to_pascal(name: str) -> str:
	if (len(name) == 0):
		return ""
	return name[0].upper() + name[1:]

def pascal_to_camel(name: str) -> str:
	if (len(name) == 0):
		return ""
	return name[0].lower() + name[1:]

def lower_snake_to_camel_case(name: str):
	return pascal_to_camel(lower_snake_to_pascal_case(name))

METRIC_PREFIX = {
	"micro": 1/1000000,
	"milli": 1/1000,
	"centi": 1/100,
	"": 1,
	"kilo": 1000,
	"mega": 1000000,
}
print(json.dumps(METRIC_PREFIX, indent=4))

METRIC_UNITS = {
	"mass": "gram",
	"area": "meter_squared",
	"volume": "liter",
	"length": "meter",
	"time": "second",
	"energy": "joule",
	"force": "newton",
	"pressure": "pascal",
	"power": "watt",
	"acceleration": "meters_per_second_squared",
	"velocity": "meters_per_second",
	"density": "grams_per_cubic_meter",
}

METRIC_CONVERSIONS = {
	"gram": {
		"ounce": 1/(28.35),
		"pound": 1/(453.6),
		"stone": 1/(6350),
		"US_ton": 1/(907200),
		"imperial_ton": 1/(1.016e+6),
		"metric_ton": 1/(1e+6),
		"roblox": 1000/(21.952),
	},
	"liter": {
		"inches_cubed": (61.024),
		"feet_cubed": 1/(28.317),
		"meter_cubed": 1/(1000),
		"centimeter_cubed": (1000),
		"imperial_teaspoon": (168.936),
		"imperial_tablespoon": (56.312),
		"imperial_fluid_ounce": (35.1951),
		"imperial_cup": (3.52),
		"imperial_pint": (1.76),
		"imperial_quart": 1/(1.136),
		"imperial_gallon": 1/(4.456),
		"US_teaspoon": (202.9),
		"US_tablespoon": (67.628),
		"US_fluid_ounce": (33.814),
		"US_legal_cup": (4.16667),
		"US_liquid_pint": (2.113),
		"US_liquid_quart": (1.057),
		"US_liquid_gallon": 1/(3.785),
		"roblox": 1/(1000*0.28*0.28*0.28),
	},
	"meter": {
		"inch": (39.3701),
		"foot": 1/(3.281),
		"yard": 1/(1.094),
		"mile": 1/(1609),
		"nautical_mile": 1/(1852),
		"light_year": 1/(9.461e+15),
		"astronomical_unit": 1/(1.496e+11),
		"roblox": 1/(0.28),
	},
	"meter_squared": {
		"inches_squared": (1550),
		"feet_squared": 1/(10.764),
		"yards_squared": 1/(1.196),
		"miles_squared": 1/(2.59e+6),
		"acre": 1/(4046.86),
		"hectare": 1/(1e+4),
		"roblox": 1/(0.28*0.28),
	},
	"second": {
		"minute": 1/(60),
		"hour": 1/(3600),
		"day": 1/(86400),
		"week": 1/(604800),
		"year": 1/(86400*365.25),
		"decade": 1/(10*86400*365.25),
		"century": 1/(100*86400*365.25),
		"roblox": 1,
	},
	"joule": {
		"british_thermal_unit": 1/(1055),
		"calorie": 1/(4.184),
		"watt_hour": 1/(3600),
		"foot_pound": 1/(1.356),
	},
	"newton": {
		"roblox": 0.163,
		"pound_force": 1/4.448,
	},
	"watt": {
		"roblox": 0.581,
		"newton_meter": 1,
	},
	"meters_per_second_squared": {
		"roblox": 35/9.8,
	},
	"meters_per_second": {
		"roblox": 3.57,
		"miles_per_hour": 1/2.237,
		"kilometers_per_hour": 1/3.6,
		"knot": 1/1.944,
		"feet_per_second": 1/3.281,
	},
	"pascal": {
		"roblox": 1290/(101325),
		"atmosphere": 1/101325,
		"bar": 1/100000,
		"torr": 1/133.322,
		"pound_per_square_inch": 1/6895,
	},
	"grams_per_cubic_meter": {
		"roblox": 1000000,
	}
}

types = [
	"export type Roblox = number",
	"export type Fahrenheit = number",
	"export type Celsius = number",
	"export type Kelvin = number",
]
for category in METRIC_UNITS:
	# types.append("export type "+lower_snake_to_pascal_case(METRIC_UNITS[category])+" = number")
	for prefix in METRIC_PREFIX:
		types.append("export type "+lower_snake_to_pascal_case(prefix+METRIC_UNITS[category])+" = number")
	for unit in METRIC_CONVERSIONS[METRIC_UNITS[category]]:
		if unit != "roblox":
			types.append("export type "+lower_snake_to_pascal_case(unit)+" = number")

content = [
	"--!native",
	"--!strict",
	"-- this script was generated by nightcycle/conversion-util, do not manually edit",
	]+types+[
	"return {",
]

content.append("""\
Temperature = {
	Celsius = {
		toKelvin = function(celsius: Celsius): Kelvin
			return celsius + 273.15
		end,
		toFahrenheit = function(celsius: Celsius): Fahrenheit
			return celsius*(9/5) + 32
		end,
	},
	Kelvin = {
		toCelsius = function(kelvin: Kelvin): Celsius
			return kelvin - 273.15
		end,
		toFahrenheit = function(kelvin: Kelvin): Fahrenheit
			return (kelvin - 273.15)*(9/5) + 32
		end,
	},
	Fahrenheit = {
		toCelsius = function(fahrenheit: Fahrenheit): Celsius
			return (fahrenheit - 32)*(5/9)
		end,
		toKelvin = function(fahrenheit: Fahrenheit): Kelvin
			return (fahrenheit - 32)*(5/9) + 273.15
		end,	
	},
},	
""")

for category in METRIC_UNITS:
	metric_unit = METRIC_UNITS[category]
	content.append(f"{lower_snake_to_pascal_case(category)} = "+"{")

	conversions = METRIC_CONVERSIONS[metric_unit]
	conversions[metric_unit] = 1
	for prefix in METRIC_PREFIX:
		conversions[prefix+metric_unit] = METRIC_PREFIX[prefix] * conversions[metric_unit]

	def add_unit(unit: str):
		global content
		content.append(f"{lower_snake_to_pascal_case(unit)} = "+"{")
		for other_unit in conversions:
			if other_unit != unit:
				metric_ratio = 1 / conversions[unit]
				ratio = metric_ratio*conversions[other_unit]
				content += [
					f"to{lower_snake_to_pascal_case(other_unit)} = function({lower_snake_to_camel_case(unit)}: {lower_snake_to_pascal_case(unit)}): {lower_snake_to_pascal_case(other_unit)}",
					f"return {lower_snake_to_camel_case(unit)} * {ratio}",
					"end,",
				]
		content.append("},")
	for unit in conversions:
		add_unit(unit)

	content.append("},")

content.append("\n}")

with open("src/init.luau", "w") as file:
	file.write("\n".join(content))